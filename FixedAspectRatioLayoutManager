//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package se.mau.DA343A.VT25.projekt;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.LayoutManager;

class FixedAspectRatioLayoutManager implements LayoutManager {
    private final double aspectRatio;
    private Component comp;
    private Dimension childSize;

    public FixedAspectRatioLayoutManager(double aspectRatio) {
        this.aspectRatio = aspectRatio;
    }

    public void addLayoutComponent(String name, Component comp) {
    }

    public void removeLayoutComponent(Component comp) {
    }

    public Dimension preferredLayoutSize(Container parent) {
        return new Dimension(1000, 1000);
    }

    public Dimension minimumLayoutSize(Container parent) {
        return new Dimension(100, 100);
    }

    public void layoutContainer(Container parent) {
        Dimension parentSize = parent.getSize();
        int childWidth = parentSize.width;
        int childHeight = (int)((double)childWidth / this.aspectRatio);
        if (childHeight > parentSize.height) {
            childHeight = parentSize.height;
            childWidth = (int)((double)childHeight * this.aspectRatio);
        }

        this.childSize = new Dimension(childWidth, childHeight);
        System.out.println(String.valueOf(parentSize) + " " + childWidth + " " + childHeight);
        Component[] components = parent.getComponents();
        Component comp = components[0];
        if (components.length > 1) {
            throw new RuntimeException("only one component allowed");
        } else {
            if (comp != null) {
                Dimension prefSize = this.childSize;
                comp.setBounds((parentSize.width - prefSize.width) / 2, (parentSize.height - prefSize.height) / 2, prefSize.width, prefSize.height);
            }

        }
    }
}
